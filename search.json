[{"path":"https://tanaylab.github.io/mldpEHR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Weizmann Institute Science Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tanaylab.github.io/mldpEHR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Netta Mendelson-Cohen. Author, maintainer. Aviezer Lifshitz. Author. Weizmann Institute Science. Copyright holder.","code":""},{"path":"https://tanaylab.github.io/mldpEHR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mendelson-Cohen N, Lifshitz (2022). mldpEHR: Markovian Lifelong Mortality Disease Predisposition Models Electronic Health Records. R package version 0.0.0.9000, https://tanaylab.github.io/mldpEHR/.","code":"@Manual{,   title = {mldpEHR: Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records},   author = {Netta Mendelson-Cohen and Aviezer Lifshitz},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://tanaylab.github.io/mldpEHR/}, }"},{"path":"https://tanaylab.github.io/mldpEHR/index.html","id":"mldpehr","dir":"","previous_headings":"","what":"Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records","title":"Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records","text":"mldpEHR toolkit building testing lifelong prediction models cause mortality (longevity) disease.","code":""},{"path":"https://tanaylab.github.io/mldpEHR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records","text":"can install development version mldpEHR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tanaylab/mldpEHR\")"},{"path":[]},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-disease_markov_model_for_stitch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"build an Markov probability model from multi-age prediction models — .disease_markov_model_for_stitch_model","title":"build an Markov probability model from multi-age prediction models — .disease_markov_model_for_stitch_model","text":"build Markov probability model multi-age prediction models","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-disease_markov_model_for_stitch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build an Markov probability model from multi-age prediction models — .disease_markov_model_for_stitch_model","text":"","code":".disease_markov_model_for_stitch_model(   markov,   model,   step,   qbins,   required_conditions,   min_obs_for_estimate = 10 )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-disease_markov_model_for_stitch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build an Markov probability model from multi-age prediction models — .disease_markov_model_for_stitch_model","text":"markov markov model computed next age (older). states age mapped states markov layer model prediction model (output build_cross_validation_time_stitch_classification_models) step time prediction models qbins quantile bin size prediction score markov model define state required_conditions filter apply patients filter model computation, example limiting time window min_obs_for_estimate minimum observations required compute probability per sex/sbin. minimum available, probability compuated using data.","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-disease_markov_model_for_stitch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build an Markov probability model from multi-age prediction models — .disease_markov_model_for_stitch_model","text":"markov model, list following members: model - matrix containing probability quantile(score) bin reach target_classes provided oldest model. local.model - data.frame containing probability quantile(score) bin reach quantile(score) bins next model age. qbins -  bins target - data frame containing target bin age model (used outcome younger age model)","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.cv_train_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"train an xgboost cross validation classification model with k-fold cross-validation — .mldpEHR.cv_train_outcome","title":"train an xgboost cross validation classification model with k-fold cross-validation — .mldpEHR.cv_train_outcome","text":"train xgboost cross validation classification model k-fold cross-validation","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.cv_train_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"train an xgboost cross validation classification model with k-fold cross-validation — .mldpEHR.cv_train_outcome","text":"","code":".mldpEHR.cv_train_outcome(   target,   features,   folds,   required_conditions = \"id==id\",   xgboost_params = list(booster = \"gbtree\", objective = \"binary:logistic\", subsample =     0.7, max_depth = 3, colsample_bytree = 1, eta = 0.05, min_child_weight = 1, gamma =     0, eval_metric = \"auc\"),   nrounds = 1000 )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.cv_train_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"train an xgboost cross validation classification model with k-fold cross-validation — .mldpEHR.cv_train_outcome","text":"target data.frame containing patient id, sex, target_class (0/1) fold (number used assigne cross validation folds) features data.frame containing patient id along features used classification model folds number cross-validation folds required_conditions filter apply features filter training/testing samples (e.g. missing data) xgboost_params parameters used xgboost model training nrounds number training rounds","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.cv_train_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"train an xgboost cross validation classification model with k-fold cross-validation — .mldpEHR.cv_train_outcome","text":"predictor, list following elements model - list xgboost models, fold train - data.frame containing patients id, fold, target class predicted value training (id used nfolds-1 training) test - data.frame containing patients id, fold, target class predicted value testing (id tested fold used training) xgboost_params - set parameters used xgboost nrounds - number training iterations conducted","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_empirical_prob_for_disease.html","id":null,"dir":"Reference","previous_headings":"","what":"this method computes the probability for future disease according to the availablitiy of data\nby basically computing a stitched markov model\nas score availability is not unbiased (patients with less measurements tend to be healthier),\nthe probaility will be computed seperately for patients with / without score\nwe will define the following modes:\n\n0 has required conditions at young age and known score / outcome at older age\n1 has required conditions at young age and no restrictions at older age\n2 no restrictions at young/older age\n — .mldpEHR.disease_empirical_prob_for_disease","title":"this method computes the probability for future disease according to the availablitiy of data\nby basically computing a stitched markov model\nas score availability is not unbiased (patients with less measurements tend to be healthier),\nthe probaility will be computed seperately for patients with / without score\nwe will define the following modes:\n\n0 has required conditions at young age and known score / outcome at older age\n1 has required conditions at young age and no restrictions at older age\n2 no restrictions at young/older age\n — .mldpEHR.disease_empirical_prob_for_disease","text":"method computes probability future disease according availablitiy data basically computing stitched markov model score availability unbiased (patients less measurements tend healthier), probaility computed seperately patients / without score define following modes: 0 required conditions young age known score / outcome older age 1 required conditions young age restrictions older age 2 restrictions young/older age","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_empirical_prob_for_disease.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"this method computes the probability for future disease according to the availablitiy of data\nby basically computing a stitched markov model\nas score availability is not unbiased (patients with less measurements tend to be healthier),\nthe probaility will be computed seperately for patients with / without score\nwe will define the following modes:\n\n0 has required conditions at young age and known score / outcome at older age\n1 has required conditions at young age and no restrictions at older age\n2 no restrictions at young/older age\n — .mldpEHR.disease_empirical_prob_for_disease","text":"","code":".mldpEHR.disease_empirical_prob_for_disease(   population,   step,   required_conditions = \"id==id\" )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_empirical_prob_for_disease.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"this method computes the probability for future disease according to the availablitiy of data\nby basically computing a stitched markov model\nas score availability is not unbiased (patients with less measurements tend to be healthier),\nthe probaility will be computed seperately for patients with / without score\nwe will define the following modes:\n\n0 has required conditions at young age and known score / outcome at older age\n1 has required conditions at young age and no restrictions at older age\n2 no restrictions at young/older age\n — .mldpEHR.disease_empirical_prob_for_disease","text":"population list data.frames patients system going back time. example first data.frame represents age 80, next 75 forth. patient data.frame contains following columns: patient id sex target_class (patient known outcome) disease age disease death age death followup columns can used required conditions step time populations required_conditions conditions applied patients prediction score","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_expected.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate expected number of disease patients — .mldpEHR.disease_expected","title":"calculate expected number of disease patients — .mldpEHR.disease_expected","text":"calculate expected number disease patients","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_expected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate expected number of disease patients — .mldpEHR.disease_expected","text":"","code":".mldpEHR.disease_expected(index, population_count, edp)"},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mldpEHR.disease_expected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate expected number of disease patients — .mldpEHR.disease_expected","text":"index index entry empirical disase prob current age start propogation population_count data.frame containing age, sex, number patients available edp empirical disease prob, output .mldpEHR.disease_empirical_prob_for_disease","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mortality_markov_model_for_stitch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"build an Markov probability model from multi-age prediction models — .mortality_markov_model_for_stitch_model","title":"build an Markov probability model from multi-age prediction models — .mortality_markov_model_for_stitch_model","text":"build Markov probability model multi-age prediction models","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mortality_markov_model_for_stitch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build an Markov probability model from multi-age prediction models — .mortality_markov_model_for_stitch_model","text":"","code":".mortality_markov_model_for_stitch_model(   markov,   model,   step,   qbins,   required_conditions,   min_obs_for_estimate = 10 )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mortality_markov_model_for_stitch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build an Markov probability model from multi-age prediction models — .mortality_markov_model_for_stitch_model","text":"markov markov model computed next age (older). states age mapped states markov layer model prediction model (output build_cross_validation_time_stitch_classification_models) step time prediction models qbins quantile bin size prediction score markov model define state required_conditions filter apply patients filter model computation, example limiting time window min_obs_for_estimate minimum observations required compute probability per sex/sbin. minimum available, probability compuated using data.","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/dot-mortality_markov_model_for_stitch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build an Markov probability model from multi-age prediction models — .mortality_markov_model_for_stitch_model","text":"markov model, list following members: model - matrix containing probability quantile(score) bin reach target_classes provided oldest model. local.model - data.frame containing probability quantile(score) bin reach quantile(score) bins next model age. qbins -  bins target - data frame containing target bin age model (used outcome younger age model)","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mldpEHR: Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records — mldpEHR-package","title":"mldpEHR: Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records — mldpEHR-package","text":"toolkit building testing lifelong prediction models cause mortality (longevity) disease.","code":""},{"path":[]},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mldpEHR: Markovian Lifelong Mortality and Disease Predisposition Models for Electronic Health Records — mldpEHR-package","text":"Maintainer: Netta Mendelson-Cohen netta.mendelsoncohen@weizmann.ac.il Authors: Aviezer Lifshitz aviezer.lifshitz@weizmann.ac.il contributors: Weizmann Institute Science [copyright holder]","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_markov.html","id":null,"dir":"Reference","previous_headings":"","what":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","title":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","text":"implement , patients given age binned according model score (using quantiles). bin assigned state, computing probability traversing state next model state. Patients missing score also included model reflect actual population numbers","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_markov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","text":"","code":"mldpEHR.disease_markov(   models,   outcome,   step,   qbins = seq(0, 1, by = 0.05),   required_conditions = \"id==id\" )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_markov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","text":"models list prediction models (output mldpEHR.cv_train_stitch_outcome) outcome time oldest model (first) target outcome step time prediction models qbins quantile bin size prediction score markov model define state required_conditions filter apply patients filter model computation, example limiting time window","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_markov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","text":"list markov models (per age), list following members: model - matrix containing probability quantile(score) bin reach target_classes provided oldest model. local.model - data.frame containing probability quantile(score) bin reach quantile(score) bins next model age. qbins -  bins target - data frame containing target bin age model (used outcome younger age model)","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_markov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"To implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from each state to the\nnext model state.\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.disease_markov","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) # build base predictor N <- 1000 patients <- purrr::map(0:5, ~ data.frame(     id = 1:N,     sex = rep(1, N),     age = 80 - .x * 5,     death = c(rep(NA, 0.2 * N), rep(82, 0.8 * N)),     disease = rep(rep(c(NA, 81), each = N / 4), 2),     followup = .x * 5 + 5 )) %>%     setNames(seq(80, by = -5, length.out = 6)) features <- purrr::map(0:5, ~ data.frame(     id = 1:N,     a = c(rnorm(0.2 * N), rnorm(0.8 * N, mean = 2, sd = 1)),     b = rep(c(rnorm(N / 4), rnorm(N / 4, mean = 3)), 2) )) %>% setNames(seq(80, by = -5, length.out = 6)) predictors <- mldpEHR.disease_multi_age_predictors(patients, features, 5, 3) #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  qbins <- seq(0, 1, by = 0.1) markov <- mldpEHR.disease_markov(predictors, 5, 5, qbins = qbins) #> Warning: Insufficient stats for age:80 for sbin:no_score for sex:male ,using pop #> Error in pivot_wider(., id_cols = c(sbin, sex), names_from = outcome,     values_from = est): could not find function \"pivot_wider\" prob <- purrr::map2_df(markov, names(markov), ~     as_tibble(.x$model[[1]], rownames = \"sbin\") %>%         mutate(model = .y)) %>%     mutate(sbin = factor(sbin,         levels = c(\"death\", 1:length(qbins), \"disease\", \"disease_death\", \"no_score\")     )) #> Error in map2(.x, .y, .f, ...): object 'markov' not found ggplot(prob, aes(x = sbin, y = disease + disease_death)) +     geom_point() +     facet_wrap(~model, nrow = 1) +     theme_bw() #> Error in ggplot(prob, aes(x = sbin, y = disease + disease_death)): object 'prob' not found"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_multi_age_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","text":"build xgboost cross validation classification model k-fold cross-validation featureset provided, assumed classification defined previous model","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_multi_age_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","text":"","code":"mldpEHR.disease_multi_age_predictors(   patients,   features,   step,   nfolds,   required_conditions = \"id==id\",   xgboost_params = list(booster = \"gbtree\", objective = \"binary:logistic\", subsample =     0.7, max_depth = 3, colsample_bytree = 1, eta = 0.05, min_child_weight = 1, gamma =     0, eval_metric = \"auc\"),   nrounds = 1000 )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_multi_age_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","text":"patients list data.frames patients system going back time. example first data.frame represents age 80, next 75 forth. patient data.frame contains following columns: patient id sex age death - age death, NA unknown disease - age disease, NA unknown followup - available followup time (years) patient - time end database patient exists system (due death) additional columns required patient filtering future features list data.frames features step time prediction models nfolds number folds used k-fold cross validation required_conditions filter apply features filter training/testing samples (e.g. missing data) xgboost_params parameters used xgboost model training nrounds number training rounds","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_multi_age_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","text":"full list predictors, according provided patients, predictor list following members: model - list xgboost models, fold train - data.frame containing patients id, fold, target class predicted value training (id used nfolds-1 training) test - data.frame containing patients id, fold, target class predicted value testing (id tested fold used training) xgboost_params - set parameters used xgboost nrounds - number training iterations conducted","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.disease_multi_age_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.disease_multi_age_predictors","text":"","code":"library(dplyr) library(ggplot2) # build base predictor N <- 1000 patients <- purrr::map(0:5, ~ data.frame(     id = 1:N,     sex = rep(1, N),     age = 80 - .x * 5,     death = c(rep(NA, 0.4 * N), rep(82, 0.6 * N)),     disease = rep(rep(c(NA, 81), each = N / 4), 2),     followup = .x * 5 + 5 )) %>%     setNames(seq(80, by = -5, length.out = 6)) features <- purrr::map(0:5, ~ data.frame(     id = 1:N,     a = c(rnorm(0.4 * N), rnorm(0.6 * N, mean = 2, sd = 1)),     b = rep(c(rnorm(N / 4), rnorm(N / 4, mean = 3)), 2) )) %>% setNames(seq(80, by = -5, length.out = 6)) predictors <- mldpEHR.disease_multi_age_predictors(patients, features, 5, 3) #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  2s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  2s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  2s #>    test <- purrr::map2_df(predictors, names(predictors), ~ .x$test %>%     mutate(n = .y) %>%     arrange(id) %>%     mutate(         outcome =             c(                 rep(\"healthy\", 0.25 * N),                 rep(\"disease\", 0.15 * N),                 rep(\"disease_death\", 0.1 * N),                 rep(\"death\", 0.25 * N),                 rep(\"disease_death\", 0.25 * N)             )     )) ggplot(test, aes(x = predict, colour = factor(outcome))) +     facet_wrap(~n, nrow = 1) +     stat_ecdf() +     theme_bw()"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_markov.html","id":null,"dir":"Reference","previous_headings":"","what":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","title":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","text":"build Markov probability model multi-age prediction models implement , patients given age binned according model score (using quantiles). bin assigned state, computing probability traversing state next model state Patients missing score also included model reflect actual population numbers","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_markov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","text":"","code":"mldpEHR.mortality_markov(   models,   outcome,   step,   qbins = seq(0, 1, by = 0.05),   required_conditions = \"id==id\" )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_markov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","text":"models list prediction models (output mldpEHR.cv_train_stitch_outcome) outcome time oldest model (first) target outcome step time prediction models qbins quantile bin size prediction score markov model define state required_conditions filter apply patients filter model computation, example limiting time window","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_markov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","text":"list markov models (per age), list following members: model - matrix containing probability quantile(score) bin reach target_classes provided oldest model. local.model - data.frame containing probability quantile(score) bin reach quantile(score) bins next model age. qbins -  bins target - data frame containing target bin age model (used outcome younger age model)","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_markov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"build a Markov probability model from multi-age prediction models\nTo implement this, all patients at a given age will be binned according to their model score (using quantiles).\nEach bin is assigned a state, and we are computing the probability for traversing from\neach state to the next model state\nPatients with missing score are also included for this model to reflect actual population numbers — mldpEHR.mortality_markov","text":"","code":"library(dplyr) library(ggplot2) N <- 10000 patients <- purrr::map(0:5, ~ data.frame(     id = 1:N,     sex = rep(c(1, 2), N / 2),     age = 80 - .x * 5,     death = c(rep(NA, 0.2 * N), rep(82, 0.8 * N)),     followup = .x * 5 + 5 )) %>%     setNames(seq(80, by = -5, length.out = 6)) features <- purrr::map(0:5, ~ data.frame(     id = 1:N,     a = c(rnorm(0.2 * N), rnorm(0.8 * N, mean = 2, sd = 0.5)) )) %>% setNames(seq(80, by = -5, length.out = 6)) predictors <- mldpEHR.mortality_multi_age_predictors(patients, features, 5, 3, q_thresh = 0.2) #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  2s #>  #>   Training [=============================] 3/3 (100%) in  3s #>  markov <- mldpEHR.mortality_markov(predictors, 5, 5, qbins = seq(0, 1, by = 0.1)) #> Error in pivot_wider(., id_cols = c(sbin, sex), names_from = outcome,     values_from = est): could not find function \"pivot_wider\" prob <- purrr::map2_df(markov, names(markov), ~     as_tibble(.x$model[[1]], rownames = \"sbin\") %>%         mutate(sex = 0, model = .y) %>%         bind_rows(as_tibble(.x$model[[2]], rownames = \"sbin\") %>% mutate(sex = 1, model = .y))) %>%     mutate(sbin = factor(sbin, levels = c(1:10, \"death\", \"no_score\"))) #> Error in map2(.x, .y, .f, ...): object 'markov' not found  ggplot(prob, aes(x = sbin, y = death, colour = factor(sex), group = factor(sex))) +     geom_point() +     geom_line() +     facet_wrap(~model, nrow = 1) +     theme_bw() #> Error in ggplot(prob, aes(x = sbin, y = death, colour = factor(sex), group = factor(sex))): object 'prob' not found"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_multi_age_predictors.html","id":null,"dir":"Reference","previous_headings":"","what":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","text":"build xgboost cross validation classification model k-fold cross-validation featureset provided, assumed classification defined previous model","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_multi_age_predictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","text":"","code":"mldpEHR.mortality_multi_age_predictors(   patients,   features,   step,   nfolds,   required_conditions = \"id==id\",   q_thresh = 0.05,   xgboost_params = list(booster = \"gbtree\", objective = \"binary:logistic\", subsample =     0.7, max_depth = 3, colsample_bytree = 1, eta = 0.05, min_child_weight = 1, gamma =     0, eval_metric = \"auc\"),   nrounds = 1000 )"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_multi_age_predictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","text":"patients list data.frames patients system going back time. example first data.frame represents age 80, next 75 forth. patient data.frame contains following columns: patient id sex age death - age death, NA unknown followup - available followup time (years) patient - time end database patient exists system (due death) additional columns required patient filtering future features list data.frames features. Muste contain patient id column. step time prediction models nfolds number folds used k-fold cross validation required_conditions filter apply patients filter training/testing samples (e.g. missing data) q_thresh score quantile threshold target classification 1 xgboost_params parameters used xgboost model training nrounds number training rounds","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_multi_age_predictors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","text":"full list predictors, according provided patients. predictor list following members: model - list xgboost models, fold train - data.frame containing patients id, fold, target class predicted value training (id used nfolds-1 training) test - data.frame containing patients id, fold, target class predicted value testing xgboost_params - set parameters used xgboost nrounds - number training iterations conducted","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.mortality_multi_age_predictors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previous model — mldpEHR.mortality_multi_age_predictors","text":"","code":"library(dplyr) library(ggplot2) # build base predictor N <- 1000 patients <- purrr::map(0:5, ~ data.frame(     id = 1:N,     sex = rep(c(1, 2), N / 2),     age = 80 - .x * 5,     death = c(rep(NA, 0.2 * N), rep(82, 0.8 * N)),     followup = .x * 5 + 5 )) %>%     setNames(seq(80, by = -5, length.out = 6)) features <- purrr::map(0:5, ~ data.frame(     id = 1:N,     a = c(rnorm(0.2 * N), rnorm(0.8 * N, mean = 2, sd = 0.5)) )) %>% setNames(seq(80, by = -5, length.out = 6)) predictors <- mldpEHR.mortality_multi_age_predictors(patients, features, 5, 3, q_thresh = 0.2) #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  2s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  1s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  test <- purrr::map2_df(predictors, names(predictors), ~ .x$test %>%     mutate(n = .y) %>%     arrange(id) %>%     mutate(         outcome =             c(                 rep(\"alive\", 0.2 * N),                 rep(\"death\", 0.8 * N)             )     )) ggplot(test, aes(x = predict, colour = factor(outcome))) +     facet_wrap(~n, nrow = 1) +     stat_ecdf() +     theme_bw()"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.prediction_model_features.html","id":null,"dir":"Reference","previous_headings":"","what":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","title":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","text":"analyze feature significance k-fold cross validation model using shaply values","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.prediction_model_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","text":"","code":"mldpEHR.prediction_model_features(predictor)"},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.prediction_model_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","text":"predictor classification model trained mldpEHR.cv_train_outcome","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.prediction_model_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","text":"list 3 objects summary - data frame containing feature mean absolute shaply value feature across training data shap_by_patient - data frame containing patient feature feature value mean shap value across training folds shap_by_fold - similar shap_by_patient, fold seperately","code":""},{"path":"https://tanaylab.github.io/mldpEHR/reference/mldpEHR.prediction_model_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"analyze feature significance for a k-fold cross validation model using shaply values — mldpEHR.prediction_model_features","text":"","code":"N <- 100 patients <- list(data.frame(     id = 1:N,     sex = rep(c(1, 2), N / 2),     age = 80,     death = c(rep(NA, 0.2 * N), rep(82, 0.8 * N)),     followup = 5 )) features <- list(data.frame(     id = 1:N,     a = c(rnorm(0.2 * N), rnorm(0.8 * N, mean = 2, sd = 1)),     b = rep(c(rnorm(N / 4), rnorm(N / 4, mean = 3)), 2) )) predictor <- mldpEHR.mortality_multi_age_predictors(patients, features, 5, 3, q_thresh = 0.05) #>  #>   Training [-----------------------------] 0/3 (  0%) in  0s #>  #>   Training [=========>-------------------] 1/3 ( 33%) in  0s #>  #>   Training [==================>----------] 2/3 ( 67%) in  0s #>  #>   Training [=============================] 3/3 (100%) in  1s #>  predictor_features <- mldpEHR.prediction_model_features(predictor[[1]]) #> Error in pivot_longer(., !id, names_to = \"feature\", values_to = \"shap\"): could not find function \"pivot_longer\""}]
