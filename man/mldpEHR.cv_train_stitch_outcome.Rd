% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prediction_model.R
\name{mldpEHR.cv_train_stitch_outcome}
\alias{mldpEHR.cv_train_stitch_outcome}
\title{build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previoud model}
\usage{
mldpEHR.cv_train_stitch_outcome(
  base_name,
  base_predictor,
  target_list,
  feature_list,
  q_thresh = 0.05
)
}
\arguments{
\item{base_name}{\itemize{
\item name of predictor for latest time point.
}}

\item{base_predictor}{\itemize{
\item classification model used as the emprical classifier at latest time point. This contains the target outcome model.
}}

\item{target_list}{\itemize{
\item list of patients with target classification, going back in time, representing the previous (time) snapshot.
For patients with the target outcome known before the next model time, the target_classification should be set to 1.
Otherwise, target classificaiton should be set to NA
}}

\item{feature_list}{\itemize{
\item list of features, each represents the previous (time) snapshot.
}}

\item{q_thresh}{\itemize{
\item score quantile threshold for target classification of 1
}}
}
\value{
the full list of predictors, according to provided target_list
}
\description{
build an xgboost cross validation classification model with k-fold cross-validation for each featureset provided, assumed that the classification is defined by the previoud model
}
\examples{

library(dplyr)
library(ggplot2)
# build base predictor
target <- data.frame(id = 1:1000, target_class = rep(c(0, 1), each = 500), sex = rep(0:1, 500))
features <- data.frame(id = 1:500, a = rnorm(500), b = rnorm(500)) \%>\%
    bind_rows(
        data.frame(id = 501:1000, a = rnorm(500, mean = 2, sd = 2), b = rnorm(500, mean = -2, sd = 2))
    )
predictor <- mldpEHR.cv_train_outcome(target, features, folds = 3)
target_list <- purrr::map(1:3, ~ data.frame(id = 1:1000, target_class = NA, sex = rep(0:1, 500))) \%>\% setNames(1:3)
feature_list <- purrr::map(1:3, ~ data.frame(id = 1:500, a = rnorm(500), b = rnorm(500)) \%>\%
    bind_rows(
        data.frame(id = 501:1000, a = rnorm(500, mean = 2, sd = 1), b = rnorm(500, mean = -2, sd = 1))
    )) \%>\% setNames(1:3)
predictors <- mldpEHR.cv_train_stitch_outcome(0, predictor, target_list, feature_list, q_thresh = 0.5)
test <- purrr::map2_df(predictors, names(predictors), ~ .x$test \%>\% mutate(n = .y))
ggplot(test, aes(x = predict, colour = factor(target_class))) +
    facet_wrap(~n, nrow = 1) +
    geom_density() +
    theme_bw()

}
